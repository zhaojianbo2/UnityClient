// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: S2CTaskMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Game.Protobuf.S2C {

  /// <summary>Holder for reflection information generated from S2CTaskMsg.proto</summary>
  public static partial class S2CTaskMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for S2CTaskMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static S2CTaskMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBTMkNUYXNrTXNnLnByb3RvEhVvcmcuZ2FtZS5wcm90b2J1Zi5zMmMilwIK",
            "EVMyQ1Rhc2tBbGxNZXNzYWdlEhIKCnNlcnZlclRpbWUYASABKAUSGAoQY29t",
            "cGxldGVUYXNrTGlzdBgCIAMoBRJOCgt0YXNrSW5mb01hcBgDIAMoCzI5Lm9y",
            "Zy5nYW1lLnByb3RvYnVmLnMyYy5TMkNUYXNrQWxsTWVzc2FnZS5UYXNrSW5m",
            "b01hcEVudHJ5GlMKEFRhc2tJbmZvTWFwRW50cnkSCwoDa2V5GAEgASgFEi4K",
            "BXZhbHVlGAIgASgLMh8ub3JnLmdhbWUucHJvdG9idWYuczJjLlRhc2tJbmZv",
            "OgI4ASIvCgVNc2dJRBIZChVFTlVOX1RZUEVfVU5TUEVDSUZJRUQQABILCgZl",
            "TXNnSUQQtRAiiQEKCFRhc2tJbmZvEgsKA3NpZBgBIAEoBRI/Cghwcm9ncmVz",
            "cxgCIAMoCzItLm9yZy5nYW1lLnByb3RvYnVmLnMyYy5UYXNrSW5mby5Qcm9n",
            "cmVzc0VudHJ5Gi8KDVByb2dyZXNzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZh",
            "bHVlGAIgASgFOgI4AWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Game.Protobuf.S2C.S2CTaskAllMessage), global::Org.Game.Protobuf.S2C.S2CTaskAllMessage.Parser, new[]{ "ServerTime", "CompleteTaskList", "TaskInfoMap" }, null, new[]{ typeof(global::Org.Game.Protobuf.S2C.S2CTaskAllMessage.Types.MsgID) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Game.Protobuf.S2C.TaskInfo), global::Org.Game.Protobuf.S2C.TaskInfo.Parser, new[]{ "Sid", "Progress" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  任务 code = 2101
  /// </summary>
  public sealed partial class S2CTaskAllMessage : pb::IMessage<S2CTaskAllMessage> {
    private static readonly pb::MessageParser<S2CTaskAllMessage> _parser = new pb::MessageParser<S2CTaskAllMessage>(() => new S2CTaskAllMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2CTaskAllMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Game.Protobuf.S2C.S2CTaskMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CTaskAllMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CTaskAllMessage(S2CTaskAllMessage other) : this() {
      serverTime_ = other.serverTime_;
      completeTaskList_ = other.completeTaskList_.Clone();
      taskInfoMap_ = other.taskInfoMap_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2CTaskAllMessage Clone() {
      return new S2CTaskAllMessage(this);
    }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 1;
    private int serverTime_;
    /// <summary>
    /// 服务器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    /// <summary>Field number for the "completeTaskList" field.</summary>
    public const int CompleteTaskListFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_completeTaskList_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> completeTaskList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 完成的任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CompleteTaskList {
      get { return completeTaskList_; }
    }

    /// <summary>Field number for the "taskInfoMap" field.</summary>
    public const int TaskInfoMapFieldNumber = 3;
    private static readonly pbc::MapField<int, global::Org.Game.Protobuf.S2C.TaskInfo>.Codec _map_taskInfoMap_codec
        = new pbc::MapField<int, global::Org.Game.Protobuf.S2C.TaskInfo>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Org.Game.Protobuf.S2C.TaskInfo.Parser), 26);
    private readonly pbc::MapField<int, global::Org.Game.Protobuf.S2C.TaskInfo> taskInfoMap_ = new pbc::MapField<int, global::Org.Game.Protobuf.S2C.TaskInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Org.Game.Protobuf.S2C.TaskInfo> TaskInfoMap {
      get { return taskInfoMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2CTaskAllMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2CTaskAllMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerTime != other.ServerTime) return false;
      if(!completeTaskList_.Equals(other.completeTaskList_)) return false;
      if (!TaskInfoMap.Equals(other.TaskInfoMap)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerTime != 0) hash ^= ServerTime.GetHashCode();
      hash ^= completeTaskList_.GetHashCode();
      hash ^= TaskInfoMap.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerTime);
      }
      completeTaskList_.WriteTo(output, _repeated_completeTaskList_codec);
      taskInfoMap_.WriteTo(output, _map_taskInfoMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerTime);
      }
      size += completeTaskList_.CalculateSize(_repeated_completeTaskList_codec);
      size += taskInfoMap_.CalculateSize(_map_taskInfoMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2CTaskAllMessage other) {
      if (other == null) {
        return;
      }
      if (other.ServerTime != 0) {
        ServerTime = other.ServerTime;
      }
      completeTaskList_.Add(other.completeTaskList_);
      taskInfoMap_.Add(other.taskInfoMap_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            completeTaskList_.AddEntriesFrom(input, _repeated_completeTaskList_codec);
            break;
          }
          case 26: {
            taskInfoMap_.AddEntriesFrom(input, _map_taskInfoMap_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the S2CTaskAllMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MsgID {
        [pbr::OriginalName("ENUN_TYPE_UNSPECIFIED")] EnunTypeUnspecified = 0,
        [pbr::OriginalName("eMsgID")] EMsgId = 2101,
      }

    }
    #endregion

  }

  public sealed partial class TaskInfo : pb::IMessage<TaskInfo> {
    private static readonly pb::MessageParser<TaskInfo> _parser = new pb::MessageParser<TaskInfo>(() => new TaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Game.Protobuf.S2C.S2CTaskMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo(TaskInfo other) : this() {
      sid_ = other.sid_;
      progress_ = other.progress_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo Clone() {
      return new TaskInfo(this);
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 1;
    private int sid_;
    /// <summary>
    /// sid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sid {
      get { return sid_; }
      set {
        sid_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_progress_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> progress_ = new pbc::MapField<int, int>();
    /// <summary>
    /// 进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Progress {
      get { return progress_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sid != other.Sid) return false;
      if (!Progress.Equals(other.Progress)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sid != 0) hash ^= Sid.GetHashCode();
      hash ^= Progress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sid);
      }
      progress_.WriteTo(output, _map_progress_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sid);
      }
      size += progress_.CalculateSize(_map_progress_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.Sid != 0) {
        Sid = other.Sid;
      }
      progress_.Add(other.progress_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Sid = input.ReadInt32();
            break;
          }
          case 18: {
            progress_.AddEntriesFrom(input, _map_progress_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
